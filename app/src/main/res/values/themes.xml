<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base(Default) application theme. -->
    <style name="AppTheme.ThemeAndVersionExplorer" parent="Theme.MaterialComponents.DayNight.DarkActionBar">
        <!-- Primary brand color. -->
        <item name="colorPrimary">@color/purple_500</item>
        <item name="colorPrimaryVariant">@color/purple_700</item>
        <item name="colorOnPrimary">@color/white</item>
        <!-- Secondary brand color. -->
        <item name="colorSecondary">@color/teal_200</item>
        <item name="colorSecondaryVariant">@color/teal_700</item>
        <item name="colorOnSecondary">@color/black</item>
        <!-- Status bar color. -->
        <item name="android:statusBarColor">?attr/colorPrimaryVariant</item>
        <!-- Customize your theme here. -->
    </style>

    <!-- Custom application theme. -->
    <!-- Since the minSdk is now 23(Android 6.0) & not 19(Android 4.4), there's no more need to use AppCompat to support older versions in the application theme -->
    <!-- Unlike the base/default theme, we choose a parent theme with no action bar because an action bar since our app will have some activities that don't necessarily require one e.g. Customer & Driver map, and we create our own toolbar. An action bar in the app theme(like above) mandates every activity created to have it.-->
    <!-- Difference between Light and Dark application themes:
        1. Color Palette:
        Light themes: Typically use lighter colors, such as white or light gray, for backgrounds and text. This creates a brighter, more airy appearance.
        Dark themes: Use darker colors, such as black or deep gray, for backgrounds and text. This can reduce eye strain in low-light environments and improve battery life on some devices.
        2. Contrast:
        Light themes: Often have higher contrast between text and background colors, making it easier to read in various lighting conditions.
        Dark themes: May have lower contrast, but the darker background can help reduce glare and improve readability on certain screens.
        3. Accessibility:
        Light themes: Can be more accessible for people with visual impairments, as the higher contrast makes it easier to distinguish elements.
        Dark themes: Can also be accessible, especially for people with light sensitivity or who prefer a darker environment.

        Difference between Theme.MaterialComponents.Light and Theme.MaterialComponents.DayNight themes
        1. Theme.MaterialComponents.Light:
        Static Theme: The is fixed and does not change based on system settings or user preferences.
        Always Light: App always uses a light theme, regardless of the device's current theme or the user's preferences.
        Suitable For: Apps that do not need to adapt their appearance to different lighting conditions or user preferences.
        2. Theme.MaterialComponents.DayNight:
        Dynamic Theme: Automatically adjusts its appearance based on the device's current theme or the user's preferences.
        Adapts to System: App uses a light theme during the day and a dark theme at night, following the system's default theme or the user's chosen theme.
        Suitable For: Apps that want to provide a more immersive and user-friendly experience by matching the app's appearance to the user's environment.
    -->
    <!--Theme.MaterialComponents.Light only has NoActionBar & DarkActionBar as action bar options. -->
    <style name="AppTheme.Light.NoActionBar" parent="Theme.MaterialComponents.Light.NoActionBar">
        <!-- Gray background and gray text view with no action bar.-->
        <item name="colorPrimary">@color/purple_500</item>
        <item name="colorPrimaryVariant">@color/purple_700</item>
        <item name="colorSecondary">@color/teal_200</item>
    </style>

    <style name="AppTheme.Light.DarkActionBar" parent="Theme.MaterialComponents.Light.DarkActionBar">
        <!-- Gray background and gray text view with dark action bar-->
        <item name="colorPrimary">@color/purple_500</item>
        <item name="colorPrimaryVariant">@color/purple_700</item>
        <item name="colorSecondary">@color/teal_200</item>
    </style>

    <!--Theme.MaterialComponents.DayNight only has NoActionBar & DarkActionBar as an action bar option. -->
    <style name="AppTheme.DayNight.NoActionBar" parent="Theme.MaterialComponents.DayNight.NoActionBar">
        <!-- No action bar while adapting to users and system preferences along with the environment(day/night).
         Dark theme OFF(in Settings > Display): Gray background and gray text.
         Dark theme ON(in Settings > Display): Black background and gray text.
        -->
        <item name="colorPrimary">@color/purple_500</item>
        <item name="colorPrimaryVariant">@color/purple_700</item>
        <item name="colorSecondary">@color/teal_200</item>
    </style>

    <style name="AppTheme.DayNight.DarkActionBar" parent="Theme.MaterialComponents.DayNight.DarkActionBar">
        <!-- Dark action bar while adapting to users and system preferences along with the environment(day/night).
         Dark theme OFF(in Settings > Display): Gray background and gray text.
         Dark theme ON(in Settings > Display): Black background and gray text.
        -->
        <item name="colorPrimary">@color/purple_500</item>
        <item name="colorPrimaryVariant">@color/purple_700</item>
        <item name="colorSecondary">@color/teal_200</item>
    </style>

    <style name="Theme.TextInputLayout" parent="Widget.MaterialComponents.TextInputLayout.OutlinedBox"> <!-- Instead of TextAppearance.AppCompat -->
        <!--NB: We can only control the text(textSize, textColorHighlight), cursor(colorControlNormal, colorControlActivated) and background(backgroundTint) here.
        textColorHint doesn't seem to work and textColorLink probably wouldn't work as well.
        The underline and the label color (when the field isn't empty the hint animates up) are by default the primary color.
        Although backgroundTint works, the background color, along with the underline color can be set with a background drawable applied to TextInputEditText. This background will override the default color(primary color)
        boxCornerRadius also works, but the backgroundTint can't be white because its the same as the layouts color. boxBackgroundMode, boxBackgroundColor, boxStrokeColor don't though.-->
        <!-- UPDATE: Even if a drawable is used to override a theme, it seems we're still unable to override the default underline color.
        What instead happens is you have two different colors on top of each other at the bottom no matter how much we thicken the stroke of the drawable underline.
        Conclusion: The drawable is best suited to customizing how the edit text looks not necessarily overriding themes.
     -->
        <item name="android:textSize">16sp</item>
        <!-- Hint color and label color in false state -->
        <item name="android:textColorHint">@color/red</item> <!-- color of hint text displayed when the field is empty. -->
        <item name="android:textColorHighlight">@color/red</item> <!-- color of highlighted text(when you highlight/select-all text inside the edit text after typing) -->
        <item name="android:textColorLink">@color/purple_200</item> <!-- color of link text (URLs) within edit text e.g. browser search bar -->
        <!-- Cursor color in normal/unfocused state and activated/focused state -->
        <item name="colorControlNormal">@color/white</item> <!-- Specifies the default color of UI elements(in this case, cursor) when they are not selected/activated/focused. -->
        <item name="colorControlActivated">@color/black</item> <!-- Specifies the color for UI elements(in this case, cursor) when they are selected/activated/focused, indicating that it is currently in focus or has been interacted with. -->
        <!-- Background of TextInputLayout and EditText(default is gray) -->
        <!-- <item name="android:backgroundTint">@color/gray</item> --> <!-- background color -->
        <item name="boxCornerRadiusBottomStart">15dp</item> <!-- top left border radius -->
        <item name="boxCornerRadiusBottomEnd">15dp</item> <!-- top right border radius -->
        <item name="boxCornerRadiusTopStart">15dp</item> <!-- bottom left border radius -->
        <item name="boxCornerRadiusTopEnd">15dp</item> <!-- bottom right border radius -->
        <item name="boxStrokeColor">@color/red</item>
    </style>

    <style name="Theme.ProgressDialog" parent="Theme.MaterialComponents.Light.Dialog.Alert"> <!-- Theme.AppCompat.Light.Dialog.Alert -->
        <item name="android:background">@color/red</item>
        <item name="android:textColor">@color/white</item>
        <item name="android:textSize">16sp</item>
        <item name="android:minWidth">300dp</item> <!-- extend width of default progress dialog -->
        <item name="android:colorControlActivated">@color/white</item> <!-- Specifies the color for UI elements(in this case, the circle spinner) when they are selected/activated/focused, indicating that it is currently in focus or has been interacted with. -->
    </style>

    <style name="Theme.RadioButton" parent="AppTheme.Light.DarkActionBar">
        <!-- Although the parent theme is of type Light.DarkActionBar, radio buttons styled by this theme can still be reused in activities whose app theme is Light.NoActionBar with no issues.
             The caveat though is that they will still inherit from Light.Dark action bar. E.g. if colorAccent doesn't exist below, an activity of type Light.NoActionBar will inherit the secondaryColor from Light.DarkActionBar
             In this project, though both Light.NoActionBar & Light.DarkActionBar have the same exact colors so that shouldn't be a problem. Furthermore, this is only ever a problem if you omit a key item from this theme's settings.
         -->
        <item name="colorAccent">@color/red</item> <!--If this is commented out, then the radio button 'checked' color will be inherited from the parent theme's secondaryColor(colorTeal).-->
    </style>

    <style name="Theme.CheckBox" parent="AppTheme.Light.DarkActionBar">
        <!-- Although the parent theme is of type Light.DarkActionBar, checkboxes styled by this theme can still be reused in activities whose app theme is Light.NoActionBar with no issues.
             The caveat though is that they will still inherit from Light.Dark action bar. E.g. if colorAccent doesn't exist below, an activity of type Light.NoActionBar will inherit the secondaryColor from Light.DarkActionBar
             In this project, though both Light.NoActionBar & Light.DarkActionBar have the same exact colors so that shouldn't be a problem. Furthermore, this is only ever a problem if you omit a key item from this theme's settings.
         -->
        <item name="colorAccent">@color/red</item> <!--If this is commented out, then the radio button 'checked' color will be inherited from the parent theme's secondaryColor(teal_200).-->
    </style>


</resources>